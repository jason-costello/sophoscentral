// Copyright 2017 The go-github AUTHORS. All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-accessors; DO NOT EDIT.

package sophoscentral

import (
	"testing"
	"time"
)

func TestAssignedProduct_GetStatus(tt *testing.T) {
	var zeroValue string
	a := &AssignedProduct{Status: &zeroValue}
	a.GetStatus()
	a = &AssignedProduct{}
	a.GetStatus()
	a = nil
	a.GetStatus()
}

func TestAssociatedPerson_GetID(tt *testing.T) {
	var zeroValue string
	a := &AssociatedPerson{ID: &zeroValue}
	a.GetID()
	a = &AssociatedPerson{}
	a.GetID()
	a = nil
	a.GetID()
}

func TestAssociatedPerson_GetName(tt *testing.T) {
	var zeroValue string
	a := &AssociatedPerson{Name: &zeroValue}
	a.GetName()
	a = &AssociatedPerson{}
	a.GetName()
	a = nil
	a.GetName()
}

func TestEndpoints_GetPages(tt *testing.T) {
	e := &Endpoints{}
	e.GetPages()
	e = nil
	e.GetPages()
}

func TestHealth_GetOverall(tt *testing.T) {
	var zeroValue string
	h := &Health{Overall: &zeroValue}
	h.GetOverall()
	h = &Health{}
	h.GetOverall()
	h = nil
	h.GetOverall()
}

func TestIntPrevExclusionItem_GetComment(tt *testing.T) {
	var zeroValue string
	i := &IntrusionPreventionsExclusionItem{Comment: &zeroValue}
	i.GetComment()
	i = &IntrusionPreventionsExclusionItem{}
	i.GetComment()
	i = nil
	i.GetComment()
}

func TestIntPrevExclusionItem_GetDirection(tt *testing.T) {
	i := &IntrusionPreventionsExclusionItem{}
	i.GetDirection()
	i = nil
	i.GetDirection()
}

func TestIntPrevExclusionItem_GetID(tt *testing.T) {
	var zeroValue string
	i := &IntrusionPreventionsExclusionItem{ID: &zeroValue}
	i.GetID()
	i = &IntrusionPreventionsExclusionItem{}
	i.GetID()
	i = nil
	i.GetID()
}

func TestIntPrevExclusionItem_GetType(tt *testing.T) {
	var zeroValue string
	i := &IntrusionPreventionsExclusionItem{Type: &zeroValue}
	i.GetType()
	i = &IntrusionPreventionsExclusionItem{}
	i.GetType()
	i = nil
	i.GetType()
}

func TestIsolationSettings_GetComment(tt *testing.T) {
	var zeroValue string
	i := &IsolationSettings{Comment: &zeroValue}
	i.GetComment()
	i = &IsolationSettings{}
	i.GetComment()
	i = nil
	i.GetComment()
}

func TestIsolationSettings_GetEnabled(tt *testing.T) {
	var zeroValue bool
	i := &IsolationSettings{Enabled: &zeroValue}
	i.GetEnabled()
	i = &IsolationSettings{}
	i.GetEnabled()
	i = nil
	i.GetEnabled()
}

func TestIsolationSettings_GetLastDisabledAt(tt *testing.T) {
	var zeroValue string
	i := &IsolationSettings{LastDisabledAt: &zeroValue}
	i.GetLastDisabledAt()
	i = &IsolationSettings{}
	i.GetLastDisabledAt()
	i = nil
	i.GetLastDisabledAt()
}

func TestIsolationSettings_GetLastEnabledAt(tt *testing.T) {
	var zeroValue string
	i := &IsolationSettings{LastEnabledAt: &zeroValue}
	i.GetLastEnabledAt()
	i = &IsolationSettings{}
	i.GetLastEnabledAt()
	i = nil
	i.GetLastEnabledAt()
}

func TestIsolationSettingsUpdate_GetComment(tt *testing.T) {
	var zeroValue string
	i := &IsolationSettingsUpdate{Comment: &zeroValue}
	i.GetComment()
	i = &IsolationSettingsUpdate{}
	i.GetComment()
	i = nil
	i.GetComment()
}

func TestIsolationSettingsUpdate_GetEnabled(tt *testing.T) {
	var zeroValue bool
	i := &IsolationSettingsUpdate{Enabled: &zeroValue}
	i.GetEnabled()
	i = &IsolationSettingsUpdate{}
	i.GetEnabled()
	i = nil
	i.GetEnabled()
}

func TestItem_GetAssociatedPerson(tt *testing.T) {
	i := &Item{}
	i.GetAssociatedPerson()
	i = nil
	i.GetAssociatedPerson()
}

func TestItem_GetEncryption(tt *testing.T) {
	i := &Item{}
	i.GetEncryption()
	i = nil
	i.GetEncryption()
}

func TestItem_GetGroup(tt *testing.T) {
	i := &Item{}
	i.GetGroup()
	i = nil
	i.GetGroup()
}

func TestItem_GetHealth(tt *testing.T) {
	i := &Item{}
	i.GetHealth()
	i = nil
	i.GetHealth()
}

func TestItem_GetHostname(tt *testing.T) {
	var zeroValue string
	i := &Item{Hostname: &zeroValue}
	i.GetHostname()
	i = &Item{}
	i.GetHostname()
	i = nil
	i.GetHostname()
}

func TestItem_GetID(tt *testing.T) {
	var zeroValue string
	i := &Item{ID: &zeroValue}
	i.GetID()
	i = &Item{}
	i.GetID()
	i = nil
	i.GetID()
}

func TestItem_GetLastSeenAt(tt *testing.T) {
	var zeroValue string
	i := &Item{LastSeenAt: &zeroValue}
	i.GetLastSeenAt()
	i = &Item{}
	i.GetLastSeenAt()
	i = nil
	i.GetLastSeenAt()
}

func TestItem_GetLockdown(tt *testing.T) {
	i := &Item{}
	i.GetLockdown()
	i = nil
	i.GetLockdown()
}

func TestItem_GetOS(tt *testing.T) {
	i := &Item{}
	i.GetOS()
	i = nil
	i.GetOS()
}

func TestItem_GetTamperProtectionEnabled(tt *testing.T) {
	var zeroValue bool
	i := &Item{TamperProtectionEnabled: &zeroValue}
	i.GetTamperProtectionEnabled()
	i = &Item{}
	i.GetTamperProtectionEnabled()
	i = nil
	i.GetTamperProtectionEnabled()
}

func TestItem_GetTenant(tt *testing.T) {
	i := &Item{}
	i.GetTenant()
	i = nil
	i.GetTenant()
}

func TestItem_GetType(tt *testing.T) {
	var zeroValue string
	i := &Item{Type: &zeroValue}
	i.GetType()
	i = &Item{}
	i.GetType()
	i = nil
	i.GetType()
}

func TestOS_GetBuild(tt *testing.T) {
	var zeroValue int64
	o := &OS{Build: &zeroValue}
	o.GetBuild()
	o = &OS{}
	o.GetBuild()
	o = nil
	o.GetBuild()
}

func TestOS_GetPlatform(tt *testing.T) {
	var zeroValue string
	o := &OS{Platform: &zeroValue}
	o.GetPlatform()
	o = &OS{}
	o.GetPlatform()
	o = nil
	o.GetPlatform()
}

func TestPageByOffset_GetCurrent(tt *testing.T) {
	var zeroValue int
	p := &PageByOffset{Current: &zeroValue}
	p.GetCurrent()
	p = &PageByOffset{}
	p.GetCurrent()
	p = nil
	p.GetCurrent()
}

func TestPageByOffset_GetItems(tt *testing.T) {
	var zeroValue int
	p := &PageByOffset{Items: &zeroValue}
	p.GetItems()
	p = &PageByOffset{}
	p.GetItems()
	p = nil
	p.GetItems()
}

func TestPageByOffset_GetMaxsize(tt *testing.T) {
	var zeroValue int
	p := &PageByOffset{Maxsize: &zeroValue}
	p.GetMaxsize()
	p = &PageByOffset{}
	p.GetMaxsize()
	p = nil
	p.GetMaxsize()
}

func TestPageByOffset_GetSize(tt *testing.T) {
	var zeroValue int
	p := &PageByOffset{Size: &zeroValue}
	p.GetSize()
	p = &PageByOffset{}
	p.GetSize()
	p = nil
	p.GetSize()
}

func TestPageByOffset_GetTotal(tt *testing.T) {
	var zeroValue int
	p := &PageByOffset{Total: &zeroValue}
	p.GetTotal()
	p = &PageByOffset{}
	p.GetTotal()
	p = nil
	p.GetTotal()
}

func TestPagesByFromKey_GetFromKey(tt *testing.T) {
	var zeroValue string
	p := &PagesByFromKey{FromKey: &zeroValue}
	p.GetFromKey()
	p = &PagesByFromKey{}
	p.GetFromKey()
	p = nil
	p.GetFromKey()
}

func TestPagesByFromKey_GetItems(tt *testing.T) {
	var zeroValue int
	p := &PagesByFromKey{Items: &zeroValue}
	p.GetItems()
	p = &PagesByFromKey{}
	p.GetItems()
	p = nil
	p.GetItems()
}

func TestPagesByFromKey_GetMaxSize(tt *testing.T) {
	var zeroValue int
	p := &PagesByFromKey{MaxSize: &zeroValue}
	p.GetMaxSize()
	p = &PagesByFromKey{}
	p.GetMaxSize()
	p = nil
	p.GetMaxSize()
}

func TestPagesByFromKey_GetNextKey(tt *testing.T) {
	var zeroValue string
	p := &PagesByFromKey{NextKey: &zeroValue}
	p.GetNextKey()
	p = &PagesByFromKey{}
	p.GetNextKey()
	p = nil
	p.GetNextKey()
}

func TestPagesByFromKey_GetSize(tt *testing.T) {
	var zeroValue int
	p := &PagesByFromKey{Size: &zeroValue}
	p.GetSize()
	p = &PagesByFromKey{}
	p.GetSize()
	p = nil
	p.GetSize()
}

func TestPagesByFromKey_GetTotal(tt *testing.T) {
	var zeroValue int
	p := &PagesByFromKey{Total: &zeroValue}
	p.GetTotal()
	p = &PagesByFromKey{}
	p.GetTotal()
	p = nil
	p.GetTotal()
}

func TestPagesByOffset_GetCurrent(tt *testing.T) {
	var zeroValue int
	p := &PagesByOffset{Current: &zeroValue}
	p.GetCurrent()
	p = &PagesByOffset{}
	p.GetCurrent()
	p = nil
	p.GetCurrent()
}

func TestPagesByOffset_GetItems(tt *testing.T) {
	var zeroValue int
	p := &PagesByOffset{Items: &zeroValue}
	p.GetItems()
	p = &PagesByOffset{}
	p.GetItems()
	p = nil
	p.GetItems()
}

func TestPagesByOffset_GetMaxSize(tt *testing.T) {
	var zeroValue int
	p := &PagesByOffset{MaxSize: &zeroValue}
	p.GetMaxSize()
	p = &PagesByOffset{}
	p.GetMaxSize()
	p = nil
	p.GetMaxSize()
}

func TestPagesByOffset_GetSize(tt *testing.T) {
	var zeroValue int
	p := &PagesByOffset{Size: &zeroValue}
	p.GetSize()
	p = &PagesByOffset{}
	p.GetSize()
	p = nil
	p.GetSize()
}

func TestPagesByOffset_GetTotal(tt *testing.T) {
	var zeroValue int
	p := &PagesByOffset{Total: &zeroValue}
	p.GetTotal()
	p = &PagesByOffset{}
	p.GetTotal()
	p = nil
	p.GetTotal()
}

func TestRateLimitError_GetRetryAfter(tt *testing.T) {
	var zeroValue time.Duration
	r := &RateLimitError{RetryAfter: &zeroValue}
	r.GetRetryAfter()
	r = &RateLimitError{}
	r.GetRetryAfter()
	r = nil
	r.GetRetryAfter()
}

func TestRateLimits_GetCore(tt *testing.T) {
	r := &RateLimits{}
	r.GetCore()
	r = nil
	r.GetCore()
}

func TestServiceDetail_GetName(tt *testing.T) {
	var zeroValue string
	s := &ServiceDetail{Name: &zeroValue}
	s.GetName()
	s = &ServiceDetail{}
	s.GetName()
	s = nil
	s.GetName()
}

func TestServiceDetail_GetStatus(tt *testing.T) {
	var zeroValue string
	s := &ServiceDetail{Status: &zeroValue}
	s.GetStatus()
	s = &ServiceDetail{}
	s.GetStatus()
	s = nil
	s.GetStatus()
}

func TestTamperProtectionSettings_GetPassword(tt *testing.T) {
	var zeroValue string
	t := &TamperProtectionSettings{Password: &zeroValue}
	t.GetPassword()
	t = &TamperProtectionSettings{}
	t.GetPassword()
	t = nil
	t.GetPassword()
}

func TestThreats_GetStatus(tt *testing.T) {
	var zeroValue string
	t := &Threats{Status: &zeroValue}
	t.GetStatus()
	t = &Threats{}
	t.GetStatus()
	t = nil
	t.GetStatus()
}

func TestToggleIsolations_GetComment(tt *testing.T) {
	var zeroValue string
	t := &ToggleIsolations{Comment: &zeroValue}
	t.GetComment()
	t = &ToggleIsolations{}
	t.GetComment()
	t = nil
	t.GetComment()
}

func TestToggleIsolations_GetEnabled(tt *testing.T) {
	var zeroValue bool
	t := &ToggleIsolations{Enabled: &zeroValue}
	t.GetEnabled()
	t = &ToggleIsolations{}
	t.GetEnabled()
	t = nil
	t.GetEnabled()
}

func TestTPPreviousPasswords_GetInvalidatedAt(tt *testing.T) {
	var zeroValue string
	t := &TPPreviousPasswords{InvalidatedAt: &zeroValue}
	t.GetInvalidatedAt()
	t = &TPPreviousPasswords{}
	t.GetInvalidatedAt()
	t = nil
	t.GetInvalidatedAt()
}

func TestTPPreviousPasswords_GetPassword(tt *testing.T) {
	var zeroValue string
	t := &TPPreviousPasswords{Password: &zeroValue}
	t.GetPassword()
	t = &TPPreviousPasswords{}
	t.GetPassword()
	t = nil
	t.GetPassword()
}
