package sophoscentral

import (
	"context"
	"fmt"
)


type EMDetectedExploitsOptions struct {
	ListByPageOffset
	// Sort defines how to sort the data
	// string should match (^[^:]+$)|(^[^:]+:(asc|desc)$)
	ThumbprintNotIn []string `url:"thumbprintNotIn,omitempty"`

}

type DetectedExploits struct{
	Item []DetectedExploit `json:"items"`
	Page PagesByOffset `json:"pages,omitempty"`
}

type DetectedExploit struct{
ID string `json:"id"`
Thumbprint string `json:"thumbprint"`
Count int `json:"count"`
Description string `json:"description"`
FirstSeenAt *string `json:"firstSeenAt"`
LastSeenAt *string `json:"lastSeenAt"`
LastUser struct{
	ID string `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
} `json:"lastUser,omitempty"`
LastEndpoint struct{
	ID string `json:"id,omitempty"`
	Hostname string `json:"hostname,omitempty"`
} `json:"lastEndpoint,omitempty"`
}
// ExploitMitigationDetectedExploitsList - List detected exploits and the number of each detected exploit.
// https://api-{dataRegion}.central.sophos.com/endpoint/v1/settings/exploit-mitigation/detected-exploits
func (e *EndpointService) ExploitMitigationDetectedExploitsList(ctx context.Context, tenantID string,  tenantURL BaseURL, opts *EMDetectedExploitsOptions) (*DetectedExploits, error) {
	path := fmt.Sprintf("%ssettings/exploit-mitigation/detected-exploits", e.basePath)
	path, err := addOptions(path, opts)
	if err != nil {
		return nil,  err
	}
	req, err := e.client.NewRequest(ctx, "GET", path, &tenantURL, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("X-Tenant-ID", tenantID)
	req.Header.Set("Content-Type", "application/json")
	e.client.Token.SetAuthHeader(req)
	sei := new(DetectedExploits)
	_, err = e.client.Do(ctx, req, sei)
	if err != nil {
		return nil, err
	}

	return sei, nil

}
